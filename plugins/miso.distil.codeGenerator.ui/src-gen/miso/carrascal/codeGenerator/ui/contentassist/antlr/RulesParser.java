/*
 * generated by Xtext
 */
package miso.carrascal.codeGenerator.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import miso.carrascal.codeGenerator.services.RulesGrammarAccess;

public class RulesParser extends AbstractContentAssistParser {
	
	@Inject
	private RulesGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected miso.carrascal.codeGenerator.ui.contentassist.antlr.internal.InternalRulesParser createParser() {
		miso.carrascal.codeGenerator.ui.contentassist.antlr.internal.InternalRulesParser result = new miso.carrascal.codeGenerator.ui.contentassist.antlr.internal.InternalRulesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRootAccess().getAlternatives_1(), "rule__Root__Alternatives_1");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getServiceAccess().getAlternatives(), "rule__Service__Alternatives");
					put(grammarAccess.getAttributeAccess().getAlternatives(), "rule__Attribute__Alternatives");
					put(grammarAccess.getAbstractEntityAccess().getAlternatives(), "rule__AbstractEntity__Alternatives");
					put(grammarAccess.getFormatEnumAccess().getAlternatives(), "rule__FormatEnum__Alternatives");
					put(grammarAccess.getServiceEnumAccess().getAlternatives(), "rule__ServiceEnum__Alternatives");
					put(grammarAccess.getDataEnumAccess().getAlternatives(), "rule__DataEnum__Alternatives");
					put(grammarAccess.getRootAccess().getGroup(), "rule__Root__Group__0");
					put(grammarAccess.getArtifactAccess().getGroup(), "rule__Artifact__Group__0");
					put(grammarAccess.getArtifactAccess().getGroup_3(), "rule__Artifact__Group_3__0");
					put(grammarAccess.getArtifactAccess().getGroup_3_1(), "rule__Artifact__Group_3_1__0");
					put(grammarAccess.getArtifactAccess().getGroup_3_2(), "rule__Artifact__Group_3_2__0");
					put(grammarAccess.getArtifactAccess().getGroup_3_3(), "rule__Artifact__Group_3_3__0");
					put(grammarAccess.getArtifactAccess().getGroup_3_3_2(), "rule__Artifact__Group_3_3_2__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getSimpleAttributeAccess().getGroup(), "rule__SimpleAttribute__Group__0");
					put(grammarAccess.getMultiAttributeAccess().getGroup(), "rule__MultiAttribute__Group__0");
					put(grammarAccess.getOnServiceAccess().getGroup(), "rule__OnService__Group__0");
					put(grammarAccess.getOnServiceAccess().getGroup_3(), "rule__OnService__Group_3__0");
					put(grammarAccess.getSimpleServiceAccess().getGroup(), "rule__SimpleService__Group__0");
					put(grammarAccess.getSimpleServiceAccess().getGroup_3(), "rule__SimpleService__Group_3__0");
					put(grammarAccess.getSimpleServiceAccess().getGroup_3_2(), "rule__SimpleService__Group_3_2__0");
					put(grammarAccess.getSimpleServiceAccess().getGroup_4(), "rule__SimpleService__Group_4__0");
					put(grammarAccess.getSimpleServiceAccess().getGroup_4_2(), "rule__SimpleService__Group_4_2__0");
					put(grammarAccess.getSimpleServiceAccess().getGroup_5(), "rule__SimpleService__Group_5__0");
					put(grammarAccess.getMultiServiceAccess().getGroup(), "rule__MultiService__Group__0");
					put(grammarAccess.getMultiServiceAccess().getGroup_2(), "rule__MultiService__Group_2__0");
					put(grammarAccess.getMultiServiceAccess().getGroup_4(), "rule__MultiService__Group_4__0");
					put(grammarAccess.getMultiServiceAccess().getGroup_7(), "rule__MultiService__Group_7__0");
					put(grammarAccess.getRootAccess().getArtifactsAssignment_0(), "rule__Root__ArtifactsAssignment_0");
					put(grammarAccess.getRootAccess().getArtifactsAssignment_1_0(), "rule__Root__ArtifactsAssignment_1_0");
					put(grammarAccess.getRootAccess().getEntitiesAssignment_1_1(), "rule__Root__EntitiesAssignment_1_1");
					put(grammarAccess.getRootAccess().getServicesAssignment_1_2(), "rule__Root__ServicesAssignment_1_2");
					put(grammarAccess.getArtifactAccess().getNameAssignment_2(), "rule__Artifact__NameAssignment_2");
					put(grammarAccess.getArtifactAccess().getExtensionAssignment_3_1_2(), "rule__Artifact__ExtensionAssignment_3_1_2");
					put(grammarAccess.getArtifactAccess().getFormatAssignment_3_2_1(), "rule__Artifact__FormatAssignment_3_2_1");
					put(grammarAccess.getArtifactAccess().getBasicServicesAssignment_3_3_1(), "rule__Artifact__BasicServicesAssignment_3_3_1");
					put(grammarAccess.getArtifactAccess().getBasicServicesAssignment_3_3_2_1(), "rule__Artifact__BasicServicesAssignment_3_3_2_1");
					put(grammarAccess.getArtifactAccess().getAttributesAssignment_5(), "rule__Artifact__AttributesAssignment_5");
					put(grammarAccess.getEntityAccess().getNameAssignment_2(), "rule__Entity__NameAssignment_2");
					put(grammarAccess.getEntityAccess().getAttributesAssignment_4(), "rule__Entity__AttributesAssignment_4");
					put(grammarAccess.getSimpleAttributeAccess().getManyAssignment_0(), "rule__SimpleAttribute__ManyAssignment_0");
					put(grammarAccess.getSimpleAttributeAccess().getRequiredAssignment_1(), "rule__SimpleAttribute__RequiredAssignment_1");
					put(grammarAccess.getSimpleAttributeAccess().getNameAssignment_2(), "rule__SimpleAttribute__NameAssignment_2");
					put(grammarAccess.getSimpleAttributeAccess().getDataAssignment_4(), "rule__SimpleAttribute__DataAssignment_4");
					put(grammarAccess.getMultiAttributeAccess().getNameAssignment_0(), "rule__MultiAttribute__NameAssignment_0");
					put(grammarAccess.getMultiAttributeAccess().getTypeAssignment_2(), "rule__MultiAttribute__TypeAssignment_2");
					put(grammarAccess.getOnServiceAccess().getArtifactAssignment_0(), "rule__OnService__ArtifactAssignment_0");
					put(grammarAccess.getOnServiceAccess().getWhenServicesAssignment_2(), "rule__OnService__WhenServicesAssignment_2");
					put(grammarAccess.getOnServiceAccess().getWhenServicesAssignment_3_1(), "rule__OnService__WhenServicesAssignment_3_1");
					put(grammarAccess.getSimpleServiceAccess().getNameAssignment_1(), "rule__SimpleService__NameAssignment_1");
					put(grammarAccess.getSimpleServiceAccess().getInputAssignment_3_1(), "rule__SimpleService__InputAssignment_3_1");
					put(grammarAccess.getSimpleServiceAccess().getInputAssignment_3_2_1(), "rule__SimpleService__InputAssignment_3_2_1");
					put(grammarAccess.getSimpleServiceAccess().getOutputAssignment_4_1(), "rule__SimpleService__OutputAssignment_4_1");
					put(grammarAccess.getSimpleServiceAccess().getOutputAssignment_4_2_1(), "rule__SimpleService__OutputAssignment_4_2_1");
					put(grammarAccess.getSimpleServiceAccess().getWhenAssignment_5_1(), "rule__SimpleService__WhenAssignment_5_1");
					put(grammarAccess.getMultiServiceAccess().getNameAssignment_1(), "rule__MultiService__NameAssignment_1");
					put(grammarAccess.getMultiServiceAccess().getParallelAssignment_2_1(), "rule__MultiService__ParallelAssignment_2_1");
					put(grammarAccess.getMultiServiceAccess().getWhenAssignment_4_1(), "rule__MultiService__WhenAssignment_4_1");
					put(grammarAccess.getMultiServiceAccess().getServicesAssignment_6(), "rule__MultiService__ServicesAssignment_6");
					put(grammarAccess.getMultiServiceAccess().getServicesAssignment_7_1(), "rule__MultiService__ServicesAssignment_7_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			miso.carrascal.codeGenerator.ui.contentassist.antlr.internal.InternalRulesParser typedParser = (miso.carrascal.codeGenerator.ui.contentassist.antlr.internal.InternalRulesParser) parser;
			typedParser.entryRuleRoot();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RulesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RulesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
