/*
 * generated by Xtext
 */
package miso.distil.codeGenerator.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import miso.distil.codeGenerator.validation.RulesValidator
import org.eclipse.emf.common.util.URI
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.Path
import codeGeneratorModel.Artifact
import com.google.inject.Inject
import codeGeneratorModel.SimpleService

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#quick-fixes
 */
class RulesQuickfixProvider extends org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider {

	@Inject 
	private miso.distil.codeGenerator.generator.Names names;

	@Fix(RulesValidator::UPPER_CASE)
	def capitalName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
			context |
			val xtextDocument = context.xtextDocument
			val firstLetter = xtextDocument.get(issue.offset, 1)
			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
		]
	}
	
	@Fix(RulesValidator::LOWER_CASE)
	def lowerName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Lowercase name', 'Lowercase the name.', 'lowercase.png') [
			context |
			val xtextDocument = context.xtextDocument
			val name = xtextDocument.get(issue.offset, issue.length)
			xtextDocument.replace(issue.offset, issue.length, name.toLowerCase)
		]
	}
	
	@Fix(RulesValidator::PROHIBITED_REFERENCE)
	def prohibitedReference(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Delete prohibited reference', 'Delete the prohibited reference.', 'delete.png') [
			context |
			val xtextDocument = context.xtextDocument
			xtextDocument.replace(issue.offset, issue.length, "")
		]
	}
	
	@Fix(RulesValidator::ARTIFACT_TODO)
	def artifactToDo(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Complete Upload/Update method', 'Complete Upload/Update method.', 'whyme.png') [
			element, context |
			if(element instanceof Artifact) {
				val platformString = element.eResource.URI.toPlatformString(true)
				val rules_file = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(platformString))
				val project = rules_file.project
				val file_json = project.getFile(new Path("src/main/java/" + names.getArtifactJsonFileStri(element) + ".java"))
				context.getXtextDocument(URI.createPlatformResourceURI(file_json.fullPath.toString() , true))
			}
			
		]
	}
	
	@Fix(RulesValidator::SERVICE_TODO)
	def serviceToDo(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Complete service method', 'Complete service method.', 'whyme.png') [
			element, context |
			if(element instanceof SimpleService) {
				val platformString = element.eResource.URI.toPlatformString(true)
				val rules_file = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(platformString))
				val project = rules_file.project
				val file_json = project.getFile(new Path("src/main/java/" + names.getServiceFileStri(element) + ".java"))
				context.getXtextDocument(URI.createPlatformResourceURI(file_json.fullPath.toString() , true))
			}
			
		]
	}
	
	@Fix(RulesValidator::EMPTY_MONGO_URI)
	def serviceMongoURI(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'I will implement my own data base later', 'I will implement my own data base later.', 'mongol.png') [
			context | 
            var xtextDocument = context.xtextDocument
            xtextDocument.replace(0, 0, 'MongoURI : ""\n')
		]
		acceptor.accept(issue, 'I have no idea what i\'m doing', 'I have no idea  what i\'m doing.', 'mongol.png') [
			context |
            var xtextDocument = context.xtextDocument
            xtextDocument.replace(0, 0, 'MongoURI : "mongodb://[username]:[password]@[host]:[port1]/[database]"\n') 
		]
	}
}
