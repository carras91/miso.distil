/**
 * generated by Xtext
 */
package miso.distil.codeGenerator.ui.quickfix;

import codeGeneratorModel.Artifact;
import codeGeneratorModel.Service;
import codeGeneratorModel.SimpleService;
import com.google.inject.Inject;
import miso.distil.codeGenerator.generator.Names;
import miso.distil.codeGenerator.validation.RulesValidator;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModification;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;

/**
 * Custom quickfixes.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#quick-fixes
 */
@SuppressWarnings("all")
public class RulesQuickfixProvider extends DefaultQuickfixProvider {
  @Inject
  private Names names;
  
  @Fix(RulesValidator.UPPER_CASE)
  public void capitalName(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      Integer _offset = issue.getOffset();
      final String firstLetter = xtextDocument.get((_offset).intValue(), 1);
      Integer _offset_1 = issue.getOffset();
      String _upperCase = firstLetter.toUpperCase();
      xtextDocument.replace((_offset_1).intValue(), 1, _upperCase);
    };
    acceptor.accept(issue, "Capitalize name", "Capitalize the name.", "upcase.png", _function);
  }
  
  @Fix(RulesValidator.LOWER_CASE)
  public void lowerName(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      Integer _offset = issue.getOffset();
      Integer _length = issue.getLength();
      final String name = xtextDocument.get((_offset).intValue(), (_length).intValue());
      Integer _offset_1 = issue.getOffset();
      Integer _length_1 = issue.getLength();
      String _lowerCase = name.toLowerCase();
      xtextDocument.replace((_offset_1).intValue(), (_length_1).intValue(), _lowerCase);
    };
    acceptor.accept(issue, "Lowercase name", "Lowercase the name.", "lowercase.png", _function);
  }
  
  @Fix(RulesValidator.PROHIBITED_REFERENCE)
  public void prohibitedReference(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      Integer _offset = issue.getOffset();
      Integer _length = issue.getLength();
      xtextDocument.replace((_offset).intValue(), (_length).intValue(), "");
    };
    acceptor.accept(issue, "Delete prohibited reference", "Delete the prohibited reference.", "delete.png", _function);
  }
  
  @Fix(RulesValidator.ARTIFACT_TODO)
  public void artifactToDo(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final ISemanticModification _function = (EObject element, IModificationContext context) -> {
      if ((element instanceof Artifact)) {
        Resource _eResource = ((Artifact)element).eResource();
        URI _uRI = _eResource.getURI();
        final String platformString = _uRI.toPlatformString(true);
        IWorkspace _workspace = ResourcesPlugin.getWorkspace();
        IWorkspaceRoot _root = _workspace.getRoot();
        Path _path = new Path(platformString);
        final IFile rules_file = _root.getFile(_path);
        final IProject project = rules_file.getProject();
        String _artifactJsonFileStri = this.names.getArtifactJsonFileStri(((Artifact)element));
        String _plus = ("src/main/java/" + _artifactJsonFileStri);
        String _plus_1 = (_plus + ".java");
        Path _path_1 = new Path(_plus_1);
        final IFile file_json = project.getFile(_path_1);
        IPath _fullPath = file_json.getFullPath();
        String _string = _fullPath.toString();
        URI _createPlatformResourceURI = URI.createPlatformResourceURI(_string, true);
        context.getXtextDocument(_createPlatformResourceURI);
      }
    };
    acceptor.accept(issue, "Complete Upload/Update method", "Complete Upload/Update method.", "whyme.png", _function);
  }
  
  @Fix(RulesValidator.SERVICE_TODO)
  public void serviceToDo(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final ISemanticModification _function = (EObject element, IModificationContext context) -> {
      if ((element instanceof SimpleService)) {
        Resource _eResource = ((SimpleService)element).eResource();
        URI _uRI = _eResource.getURI();
        final String platformString = _uRI.toPlatformString(true);
        IWorkspace _workspace = ResourcesPlugin.getWorkspace();
        IWorkspaceRoot _root = _workspace.getRoot();
        Path _path = new Path(platformString);
        final IFile rules_file = _root.getFile(_path);
        final IProject project = rules_file.getProject();
        String _serviceFileStri = this.names.getServiceFileStri(((Service)element));
        String _plus = ("src/main/java/" + _serviceFileStri);
        String _plus_1 = (_plus + ".java");
        Path _path_1 = new Path(_plus_1);
        final IFile file_json = project.getFile(_path_1);
        IPath _fullPath = file_json.getFullPath();
        String _string = _fullPath.toString();
        URI _createPlatformResourceURI = URI.createPlatformResourceURI(_string, true);
        context.getXtextDocument(_createPlatformResourceURI);
      }
    };
    acceptor.accept(issue, "Complete service method", "Complete service method.", "whyme.png", _function);
  }
  
  @Fix(RulesValidator.EMPTY_MONGO_URI)
  public void serviceMongoURI(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      IXtextDocument xtextDocument = context.getXtextDocument();
      xtextDocument.replace(0, 0, "MongoURI : \"\"\n");
    };
    acceptor.accept(issue, "I will implement my own data base later", "I will implement my own data base later.", "mongol.png", _function);
    final IModification _function_1 = (IModificationContext context) -> {
      IXtextDocument xtextDocument = context.getXtextDocument();
      xtextDocument.replace(0, 0, "MongoURI : \"mongodb://[username]:[password]@[host]:[port1]/[database]\"\n");
    };
    acceptor.accept(issue, "I have no idea what i\'m doing", "I have no idea  what i\'m doing.", "mongol.png", _function_1);
  }
}
