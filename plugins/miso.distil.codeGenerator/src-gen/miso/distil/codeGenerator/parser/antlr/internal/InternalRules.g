/*
 * generated by Xtext
 */
grammar InternalRules;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package miso.distil.codeGenerator.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package miso.distil.codeGenerator.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import miso.distil.codeGenerator.services.RulesGrammarAccess;

}

@parser::members {

 	private RulesGrammarAccess grammarAccess;
 	
    public InternalRulesParser(TokenStream input, RulesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Root";	
   	}
   	
   	@Override
   	protected RulesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRootRule()); }
	 iv_ruleRoot=ruleRoot 
	 { $current=$iv_ruleRoot.current; } 
	 EOF 
;

// Rule Root
ruleRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRootAccess().getArtifactsArtifactParserRuleCall_0_0()); 
	    }
		lv_artifacts_0_0=ruleArtifact		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootRule());
	        }
       		add(
       			$current, 
       			"artifacts",
        		lv_artifacts_0_0, 
        		"Artifact");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getRootAccess().getArtifactsArtifactParserRuleCall_1_0_0()); 
	    }
		lv_artifacts_1_0=ruleArtifact		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootRule());
	        }
       		add(
       			$current, 
       			"artifacts",
        		lv_artifacts_1_0, 
        		"Artifact");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRootAccess().getEntitiesEntityParserRuleCall_1_1_0()); 
	    }
		lv_entities_2_0=ruleEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootRule());
	        }
       		add(
       			$current, 
       			"entities",
        		lv_entities_2_0, 
        		"Entity");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRootAccess().getServicesServiceParserRuleCall_1_2_0()); 
	    }
		lv_services_3_0=ruleService		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootRule());
	        }
       		add(
       			$current, 
       			"services",
        		lv_services_3_0, 
        		"Service");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleService
entryRuleService returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getServiceRule()); }
	 iv_ruleService=ruleService 
	 { $current=$iv_ruleService.current; } 
	 EOF 
;

// Rule Service
ruleService returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getServiceAccess().getSimpleServiceParserRuleCall_0()); 
    }
    this_SimpleService_0=ruleSimpleService
    { 
        $current = $this_SimpleService_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getServiceAccess().getMultiServiceParserRuleCall_1()); 
    }
    this_MultiService_1=ruleMultiService
    { 
        $current = $this_MultiService_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getPrimitiveParserRuleCall_0()); 
    }
    this_Primitive_0=rulePrimitive
    { 
        $current = $this_Primitive_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getReferenceParserRuleCall_1()); 
    }
    this_Reference_1=ruleReference
    { 
        $current = $this_Reference_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getArtifactIDParserRuleCall_2()); 
    }
    this_ArtifactID_2=ruleArtifactID
    { 
        $current = $this_ArtifactID_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleArtifact
entryRuleArtifact returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArtifactRule()); }
	 iv_ruleArtifact=ruleArtifact 
	 { $current=$iv_ruleArtifact.current; } 
	 EOF 
;

// Rule Artifact
ruleArtifact returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Artifact' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArtifactAccess().getArtifactKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArtifactAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArtifactRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArtifactAccess().getLeftSquareBracketKeyword_2_0());
    }
(	otherlv_3='extension ' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArtifactAccess().getExtensionKeyword_2_1_0());
    }
	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArtifactAccess().getFullStopKeyword_2_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArtifactAccess().getExtensionEStringParserRuleCall_2_1_2_0()); 
	    }
		lv_extension_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArtifactRule());
	        }
       		set(
       			$current, 
       			"extension",
        		lv_extension_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='format ' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getArtifactAccess().getFormatKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArtifactAccess().getFormatFormatEnumEnumRuleCall_2_2_1_0()); 
	    }
		lv_format_7_0=ruleFormatEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArtifactRule());
	        }
       		set(
       			$current, 
       			"format",
        		lv_format_7_0, 
        		"FormatEnum");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_8='services : ' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getArtifactAccess().getServicesKeyword_2_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArtifactAccess().getBasicServicesServiceEnumEnumRuleCall_2_3_1_0()); 
	    }
		lv_basicServices_9_0=ruleServiceEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArtifactRule());
	        }
       		add(
       			$current, 
       			"basicServices",
        		lv_basicServices_9_0, 
        		"ServiceEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getArtifactAccess().getCommaKeyword_2_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArtifactAccess().getBasicServicesServiceEnumEnumRuleCall_2_3_2_1_0()); 
	    }
		lv_basicServices_11_0=ruleServiceEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArtifactRule());
	        }
       		add(
       			$current, 
       			"basicServices",
        		lv_basicServices_11_0, 
        		"ServiceEnum");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12=']' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getArtifactAccess().getRightSquareBracketKeyword_2_4());
    }
)?	otherlv_13='{' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getArtifactAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArtifactAccess().getAttributesAttributeParserRuleCall_4_0()); 
	    }
		lv_attributes_14_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArtifactRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_14_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getArtifactAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Entity' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEntityAccess().getEntityKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityAccess().getAttributesAttributeParserRuleCall_3_0()); 
	    }
		lv_attributes_3_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_3_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;







// Entry rule entryRulePrimitive
entryRulePrimitive returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveRule()); }
	 iv_rulePrimitive=rulePrimitive 
	 { $current=$iv_rulePrimitive.current; } 
	 EOF 
;

// Rule Primitive
rulePrimitive returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_many_0_0=	'many' 
    {
        newLeafNode(lv_many_0_0, grammarAccess.getPrimitiveAccess().getManyManyKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimitiveRule());
	        }
       		setWithLastConsumed($current, "many", true, "many");
	    }

)
)?(
(
		lv_required_1_0=	'required' 
    {
        newLeafNode(lv_required_1_0, grammarAccess.getPrimitiveAccess().getRequiredRequiredKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimitiveRule());
	        }
       		setWithLastConsumed($current, "required", true, "required");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimitiveAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimitiveRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimitiveAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimitiveAccess().getTypeDataEnumEnumRuleCall_4_0()); 
	    }
		lv_type_4_0=ruleDataEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimitiveRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"DataEnum");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ref' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReferenceAccess().getRefKeyword_0());
    }
(
(
		lv_many_1_0=	'many' 
    {
        newLeafNode(lv_many_1_0, grammarAccess.getReferenceAccess().getManyManyKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceRule());
	        }
       		setWithLastConsumed($current, "many", true, "many");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReferenceAccess().getColonKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getReferenceAccess().getTypeEntityCrossReference_4_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleArtifactID
entryRuleArtifactID returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArtifactIDRule()); }
	 iv_ruleArtifactID=ruleArtifactID 
	 { $current=$iv_ruleArtifactID.current; } 
	 EOF 
;

// Rule ArtifactID
ruleArtifactID returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='id' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArtifactIDAccess().getIdKeyword_0());
    }
(
(
		lv_many_1_0=	'many' 
    {
        newLeafNode(lv_many_1_0, grammarAccess.getArtifactIDAccess().getManyManyKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArtifactIDRule());
	        }
       		setWithLastConsumed($current, "many", true, "many");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getArtifactIDAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArtifactIDRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArtifactIDAccess().getColonKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getArtifactIDRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getArtifactIDAccess().getTypeArtifactCrossReference_4_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOnService
entryRuleOnService returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOnServiceRule()); }
	 iv_ruleOnService=ruleOnService 
	 { $current=$iv_ruleOnService.current; } 
	 EOF 
;

// Rule OnService
ruleOnService returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOnServiceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getOnServiceAccess().getArtifactArtifactCrossReference_0_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOnServiceAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnServiceAccess().getWhenServicesServiceEnumEnumRuleCall_2_0()); 
	    }
		lv_whenServices_2_0=ruleServiceEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnServiceRule());
	        }
       		add(
       			$current, 
       			"whenServices",
        		lv_whenServices_2_0, 
        		"ServiceEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOnServiceAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnServiceAccess().getWhenServicesServiceEnumEnumRuleCall_3_1_0()); 
	    }
		lv_whenServices_4_0=ruleServiceEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnServiceRule());
	        }
       		add(
       			$current, 
       			"whenServices",
        		lv_whenServices_4_0, 
        		"ServiceEnum");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOnServiceAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSimpleService
entryRuleSimpleService returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleServiceRule()); }
	 iv_ruleSimpleService=ruleSimpleService 
	 { $current=$iv_ruleSimpleService.current; } 
	 EOF 
;

// Rule SimpleService
ruleSimpleService returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleServiceAccess().getSimpleServiceAction_0(),
            $current);
    }
)	otherlv_1='Service' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimpleServiceAccess().getServiceKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleServiceAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleServiceRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimpleServiceAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='input : ' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSimpleServiceAccess().getInputKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleServiceAccess().getInputInoutParserRuleCall_4_1_0()); 
	    }
		lv_input_5_0=ruleInout		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleServiceRule());
	        }
       		add(
       			$current, 
       			"input",
        		lv_input_5_0, 
        		"Inout");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSimpleServiceAccess().getCommaKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleServiceAccess().getInputInoutParserRuleCall_4_2_1_0()); 
	    }
		lv_input_7_0=ruleInout		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleServiceRule());
	        }
       		add(
       			$current, 
       			"input",
        		lv_input_7_0, 
        		"Inout");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_8='output : ' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSimpleServiceAccess().getOutputKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleServiceAccess().getOutputInoutParserRuleCall_5_1_0()); 
	    }
		lv_output_9_0=ruleInout		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleServiceRule());
	        }
       		add(
       			$current, 
       			"output",
        		lv_output_9_0, 
        		"Inout");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSimpleServiceAccess().getCommaKeyword_5_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleServiceAccess().getOutputInoutParserRuleCall_5_2_1_0()); 
	    }
		lv_output_11_0=ruleInout		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleServiceRule());
	        }
       		add(
       			$current, 
       			"output",
        		lv_output_11_0, 
        		"Inout");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_12='when : ' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSimpleServiceAccess().getWhenKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleServiceAccess().getWhenOnServiceParserRuleCall_6_1_0()); 
	    }
		lv_when_13_0=ruleOnService		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleServiceRule());
	        }
       		add(
       			$current, 
       			"when",
        		lv_when_13_0, 
        		"OnService");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_14='}' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getSimpleServiceAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleMultiService
entryRuleMultiService returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiServiceRule()); }
	 iv_ruleMultiService=ruleMultiService 
	 { $current=$iv_ruleMultiService.current; } 
	 EOF 
;

// Rule MultiService
ruleMultiService returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='MultiService' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMultiServiceAccess().getMultiServiceKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiServiceAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiServiceRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiServiceAccess().getLeftSquareBracketKeyword_2_0());
    }
(
(
		lv_parallel_3_0=	'parallel' 
    {
        newLeafNode(lv_parallel_3_0, grammarAccess.getMultiServiceAccess().getParallelParallelKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiServiceRule());
	        }
       		setWithLastConsumed($current, "parallel", true, "parallel");
	    }

)
)?	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultiServiceAccess().getRightSquareBracketKeyword_2_2());
    }
)?	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMultiServiceAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_6='when : ' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMultiServiceAccess().getWhenKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiServiceAccess().getWhenOnServiceParserRuleCall_4_1_0()); 
	    }
		lv_when_7_0=ruleOnService		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiServiceRule());
	        }
       		add(
       			$current, 
       			"when",
        		lv_when_7_0, 
        		"OnService");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8='services : ' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMultiServiceAccess().getServicesKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiServiceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMultiServiceAccess().getServicesServiceCrossReference_6_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMultiServiceAccess().getCommaKeyword_7_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiServiceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMultiServiceAccess().getServicesServiceCrossReference_7_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMultiServiceAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleInout
entryRuleInout returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInoutRule()); }
	 iv_ruleInout=ruleInout 
	 { $current=$iv_ruleInout.current; } 
	 EOF 
;

// Rule Inout
ruleInout returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_many_0_0=	'many' 
    {
        newLeafNode(lv_many_0_0, grammarAccess.getInoutAccess().getManyManyKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInoutRule());
	        }
       		setWithLastConsumed($current, "many", true, "many");
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInoutRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInoutAccess().getTypeAbstractEntityCrossReference_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInoutAccess().getLeftSquareBracketKeyword_2_0());
    }
	otherlv_3='with' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInoutAccess().getWithKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInoutAccess().getCompatibilityCompParserRuleCall_2_2_0()); 
	    }
		lv_compatibility_4_0=ruleComp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInoutRule());
	        }
       		set(
       			$current, 
       			"compatibility",
        		lv_compatibility_4_0, 
        		"Comp");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInoutAccess().getRightSquareBracketKeyword_2_3());
    }
)?)
;





// Entry rule entryRuleComp
entryRuleComp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompRule()); } 
	 iv_ruleComp=ruleComp 
	 { $current=$iv_ruleComp.current.getText(); }  
	 EOF 
;

// Rule Comp
ruleComp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCompAccess().getEStringParserRuleCall_0()); 
    }
    this_EString_0=ruleEString    {
		$current.merge(this_EString_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCompAccess().getEStringParserRuleCall_1_1()); 
    }
    this_EString_2=ruleEString    {
		$current.merge(this_EString_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompAccess().getEqualsSignKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getCompAccess().getEStringParserRuleCall_3()); 
    }
    this_EString_4=ruleEString    {
		$current.merge(this_EString_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Rule FormatEnum
ruleFormatEnum returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='XMI' 
	{
        $current = grammarAccess.getFormatEnumAccess().getXMIEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFormatEnumAccess().getXMIEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='BINARY' 
	{
        $current = grammarAccess.getFormatEnumAccess().getBINARYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFormatEnumAccess().getBINARYEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='TEXT' 
	{
        $current = grammarAccess.getFormatEnumAccess().getTEXTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFormatEnumAccess().getTEXTEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='XML' 
	{
        $current = grammarAccess.getFormatEnumAccess().getXMLEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFormatEnumAccess().getXMLEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='JSON' 
	{
        $current = grammarAccess.getFormatEnumAccess().getJSONEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getFormatEnumAccess().getJSONEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='ATL' 
	{
        $current = grammarAccess.getFormatEnumAccess().getATLEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getFormatEnumAccess().getATLEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='ZIP' 
	{
        $current = grammarAccess.getFormatEnumAccess().getZIPEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getFormatEnumAccess().getZIPEnumLiteralDeclaration_6()); 
    }
));



// Rule ServiceEnum
ruleServiceEnum returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='upload' 
	{
        $current = grammarAccess.getServiceEnumAccess().getUploadEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getServiceEnumAccess().getUploadEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='download' 
	{
        $current = grammarAccess.getServiceEnumAccess().getDownloadEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getServiceEnumAccess().getDownloadEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='update' 
	{
        $current = grammarAccess.getServiceEnumAccess().getUpdateEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getServiceEnumAccess().getUpdateEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='read' 
	{
        $current = grammarAccess.getServiceEnumAccess().getReadEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getServiceEnumAccess().getReadEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='readAll' 
	{
        $current = grammarAccess.getServiceEnumAccess().getReadAllEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getServiceEnumAccess().getReadAllEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='search' 
	{
        $current = grammarAccess.getServiceEnumAccess().getSearchEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getServiceEnumAccess().getSearchEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='delete' 
	{
        $current = grammarAccess.getServiceEnumAccess().getDeleteEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getServiceEnumAccess().getDeleteEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='all' 
	{
        $current = grammarAccess.getServiceEnumAccess().getAllEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getServiceEnumAccess().getAllEnumLiteralDeclaration_7()); 
    }
));



// Rule DataEnum
ruleDataEnum returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Boolean' 
	{
        $current = grammarAccess.getDataEnumAccess().getBooleanEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDataEnumAccess().getBooleanEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Double' 
	{
        $current = grammarAccess.getDataEnumAccess().getDoubleEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDataEnumAccess().getDoubleEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Integer' 
	{
        $current = grammarAccess.getDataEnumAccess().getIntegerEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDataEnumAccess().getIntegerEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='String' 
	{
        $current = grammarAccess.getDataEnumAccess().getStringEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getDataEnumAccess().getStringEnumLiteralDeclaration_3()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


