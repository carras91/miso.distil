/*
 * generated by Xtext
 */
package miso.distil.codeGenerator.serializer;

import codeGeneratorModel.Artifact;
import codeGeneratorModel.ArtifactID;
import codeGeneratorModel.CodeGeneratorModelPackage;
import codeGeneratorModel.Entity;
import codeGeneratorModel.Inout;
import codeGeneratorModel.MultiService;
import codeGeneratorModel.OnService;
import codeGeneratorModel.Primitive;
import codeGeneratorModel.Reference;
import codeGeneratorModel.Root;
import codeGeneratorModel.SimpleService;
import com.google.inject.Inject;
import com.google.inject.Provider;
import miso.distil.codeGenerator.services.RulesGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;

@SuppressWarnings("all")
public abstract class AbstractRulesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RulesGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == CodeGeneratorModelPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case CodeGeneratorModelPackage.ARTIFACT:
				sequence_Artifact(context, (Artifact) semanticObject); 
				return; 
			case CodeGeneratorModelPackage.ARTIFACT_ID:
				sequence_ArtifactID(context, (ArtifactID) semanticObject); 
				return; 
			case CodeGeneratorModelPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case CodeGeneratorModelPackage.INOUT:
				sequence_Inout(context, (Inout) semanticObject); 
				return; 
			case CodeGeneratorModelPackage.MULTI_SERVICE:
				sequence_MultiService(context, (MultiService) semanticObject); 
				return; 
			case CodeGeneratorModelPackage.ON_SERVICE:
				sequence_OnService(context, (OnService) semanticObject); 
				return; 
			case CodeGeneratorModelPackage.PRIMITIVE:
				sequence_Primitive(context, (Primitive) semanticObject); 
				return; 
			case CodeGeneratorModelPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case CodeGeneratorModelPackage.ROOT:
				sequence_Root(context, (Root) semanticObject); 
				return; 
			case CodeGeneratorModelPackage.SIMPLE_SERVICE:
				sequence_SimpleService(context, (SimpleService) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (many?='many'? name=EString type=[Artifact|EString])
	 */
	protected void sequence_ArtifactID(EObject context, ArtifactID semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=EString (extension=EString? format=FormatEnum? (basicServices+=ServiceEnum basicServices+=ServiceEnum*)?)? attributes+=Attribute*)
	 */
	protected void sequence_Artifact(EObject context, Artifact semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=EString attributes+=Attribute*)
	 */
	protected void sequence_Entity(EObject context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (many?='many'? type=[AbstractEntity|EString] compatibility=Comp?)
	 */
	protected void sequence_Inout(EObject context, Inout semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=EString parallel?='parallel'? when+=OnService* services+=[Service|EString] services+=[Service|EString]+)
	 */
	protected void sequence_MultiService(EObject context, MultiService semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (artifact=[Artifact|EString] whenServices+=ServiceEnum whenServices+=ServiceEnum*)
	 */
	protected void sequence_OnService(EObject context, OnService semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (many?='many'? required?='required'? name=EString type=DataEnum)
	 */
	protected void sequence_Primitive(EObject context, Primitive semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (many?='many'? name=EString type=[Entity|EString])
	 */
	protected void sequence_Reference(EObject context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (artifacts+=Artifact (artifacts+=Artifact | entities+=Entity | services+=Service)*)
	 */
	protected void sequence_Root(EObject context, Root semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=EString (input+=Inout input+=Inout*)? (output+=Inout output+=Inout*)? when+=OnService*)
	 */
	protected void sequence_SimpleService(EObject context, SimpleService semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
