/*
 * generated by Xtext
 */
package miso.distil.codeGenerator.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RulesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArtifactsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArtifactsArtifactParserRuleCall_0_0 = (RuleCall)cArtifactsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cArtifactsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cArtifactsArtifactParserRuleCall_1_0_0 = (RuleCall)cArtifactsAssignment_1_0.eContents().get(0);
		private final Assignment cEntitiesAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cEntitiesEntityParserRuleCall_1_1_0 = (RuleCall)cEntitiesAssignment_1_1.eContents().get(0);
		private final Assignment cServicesAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cServicesServiceParserRuleCall_1_2_0 = (RuleCall)cServicesAssignment_1_2.eContents().get(0);
		
		//Root:
		//	artifacts+=Artifact (artifacts+=Artifact | entities+=Entity | services+=Service)*;
		@Override public ParserRule getRule() { return rule; }

		//artifacts+=Artifact (artifacts+=Artifact | entities+=Entity | services+=Service)*
		public Group getGroup() { return cGroup; }

		//artifacts+=Artifact
		public Assignment getArtifactsAssignment_0() { return cArtifactsAssignment_0; }

		//Artifact
		public RuleCall getArtifactsArtifactParserRuleCall_0_0() { return cArtifactsArtifactParserRuleCall_0_0; }

		//(artifacts+=Artifact | entities+=Entity | services+=Service)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//artifacts+=Artifact
		public Assignment getArtifactsAssignment_1_0() { return cArtifactsAssignment_1_0; }

		//Artifact
		public RuleCall getArtifactsArtifactParserRuleCall_1_0_0() { return cArtifactsArtifactParserRuleCall_1_0_0; }

		//entities+=Entity
		public Assignment getEntitiesAssignment_1_1() { return cEntitiesAssignment_1_1; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_1_1_0() { return cEntitiesEntityParserRuleCall_1_1_0; }

		//services+=Service
		public Assignment getServicesAssignment_1_2() { return cServicesAssignment_1_2; }

		//Service
		public RuleCall getServicesServiceParserRuleCall_1_2_0() { return cServicesServiceParserRuleCall_1_2_0; }
	}

	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Service");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleServiceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultiServiceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Service:
		//	SimpleService | MultiService;
		@Override public ParserRule getRule() { return rule; }

		//SimpleService | MultiService
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleService
		public RuleCall getSimpleServiceParserRuleCall_0() { return cSimpleServiceParserRuleCall_0; }

		//MultiService
		public RuleCall getMultiServiceParserRuleCall_1() { return cMultiServiceParserRuleCall_1; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArtifactIDParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Attribute:
		//	Primitive | Reference | ArtifactID;
		@Override public ParserRule getRule() { return rule; }

		//Primitive | Reference | ArtifactID
		public Alternatives getAlternatives() { return cAlternatives; }

		//Primitive
		public RuleCall getPrimitiveParserRuleCall_0() { return cPrimitiveParserRuleCall_0; }

		//Reference
		public RuleCall getReferenceParserRuleCall_1() { return cReferenceParserRuleCall_1; }

		//ArtifactID
		public RuleCall getArtifactIDParserRuleCall_2() { return cArtifactIDParserRuleCall_2; }
	}

	public class AbstractEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArtifactParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractEntity:
		//	Artifact | Entity;
		@Override public ParserRule getRule() { return rule; }

		//Artifact | Entity
		public Alternatives getAlternatives() { return cAlternatives; }

		//Artifact
		public RuleCall getArtifactParserRuleCall_0() { return cArtifactParserRuleCall_0; }

		//Entity
		public RuleCall getEntityParserRuleCall_1() { return cEntityParserRuleCall_1; }
	}

	public class ArtifactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Artifact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArtifactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cExtensionKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cExtensionAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cExtensionEStringParserRuleCall_2_1_2_0 = (RuleCall)cExtensionAssignment_2_1_2.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cFormatKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cFormatAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cFormatFormatEnumEnumRuleCall_2_2_1_0 = (RuleCall)cFormatAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cServicesKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cBasicServicesAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cBasicServicesServiceEnumEnumRuleCall_2_3_1_0 = (RuleCall)cBasicServicesAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_2_3_2 = (Group)cGroup_2_3.eContents().get(2);
		private final Keyword cCommaKeyword_2_3_2_0 = (Keyword)cGroup_2_3_2.eContents().get(0);
		private final Assignment cBasicServicesAssignment_2_3_2_1 = (Assignment)cGroup_2_3_2.eContents().get(1);
		private final RuleCall cBasicServicesServiceEnumEnumRuleCall_2_3_2_1_0 = (RuleCall)cBasicServicesAssignment_2_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesAttributeParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Artifact:
		//	"Artifact" name=EString ("[" ("extension " "." extension=EString)? ("format " format=FormatEnum)? ("services : "
		//	basicServices+=ServiceEnum ("," basicServices+=ServiceEnum)*)? "]")? "{" attributes+=Attribute* "}";
		@Override public ParserRule getRule() { return rule; }

		//"Artifact" name=EString ("[" ("extension " "." extension=EString)? ("format " format=FormatEnum)? ("services : "
		//basicServices+=ServiceEnum ("," basicServices+=ServiceEnum)*)? "]")? "{" attributes+=Attribute* "}"
		public Group getGroup() { return cGroup; }

		//"Artifact"
		public Keyword getArtifactKeyword_0() { return cArtifactKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//("[" ("extension " "." extension=EString)? ("format " format=FormatEnum)? ("services : " basicServices+=ServiceEnum (","
		//basicServices+=ServiceEnum)*)? "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//("extension " "." extension=EString)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"extension "
		public Keyword getExtensionKeyword_2_1_0() { return cExtensionKeyword_2_1_0; }

		//"."
		public Keyword getFullStopKeyword_2_1_1() { return cFullStopKeyword_2_1_1; }

		//extension=EString
		public Assignment getExtensionAssignment_2_1_2() { return cExtensionAssignment_2_1_2; }

		//EString
		public RuleCall getExtensionEStringParserRuleCall_2_1_2_0() { return cExtensionEStringParserRuleCall_2_1_2_0; }

		//("format " format=FormatEnum)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"format "
		public Keyword getFormatKeyword_2_2_0() { return cFormatKeyword_2_2_0; }

		//format=FormatEnum
		public Assignment getFormatAssignment_2_2_1() { return cFormatAssignment_2_2_1; }

		//FormatEnum
		public RuleCall getFormatFormatEnumEnumRuleCall_2_2_1_0() { return cFormatFormatEnumEnumRuleCall_2_2_1_0; }

		//("services : " basicServices+=ServiceEnum ("," basicServices+=ServiceEnum)*)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"services : "
		public Keyword getServicesKeyword_2_3_0() { return cServicesKeyword_2_3_0; }

		//basicServices+=ServiceEnum
		public Assignment getBasicServicesAssignment_2_3_1() { return cBasicServicesAssignment_2_3_1; }

		//ServiceEnum
		public RuleCall getBasicServicesServiceEnumEnumRuleCall_2_3_1_0() { return cBasicServicesServiceEnumEnumRuleCall_2_3_1_0; }

		//("," basicServices+=ServiceEnum)*
		public Group getGroup_2_3_2() { return cGroup_2_3_2; }

		//","
		public Keyword getCommaKeyword_2_3_2_0() { return cCommaKeyword_2_3_2_0; }

		//basicServices+=ServiceEnum
		public Assignment getBasicServicesAssignment_2_3_2_1() { return cBasicServicesAssignment_2_3_2_1; }

		//ServiceEnum
		public RuleCall getBasicServicesServiceEnumEnumRuleCall_2_3_2_1_0() { return cBasicServicesServiceEnumEnumRuleCall_2_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_4_0() { return cAttributesAttributeParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Entity:
		//	"Entity" name=EString "{" attributes+=Attribute* "}";
		@Override public ParserRule getRule() { return rule; }

		//"Entity" name=EString "{" attributes+=Attribute* "}"
		public Group getGroup() { return cGroup; }

		//"Entity"
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		@Override public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primitive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cManyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cManyManyKeyword_0_0 = (Keyword)cManyAssignment_0.eContents().get(0);
		private final Assignment cRequiredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRequiredRequiredKeyword_1_0 = (Keyword)cRequiredAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeDataEnumEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//Primitive:
		//	many?="many"? required?="required"? name=EString ":" type=DataEnum;
		@Override public ParserRule getRule() { return rule; }

		//many?="many"? required?="required"? name=EString ":" type=DataEnum
		public Group getGroup() { return cGroup; }

		//many?="many"?
		public Assignment getManyAssignment_0() { return cManyAssignment_0; }

		//"many"
		public Keyword getManyManyKeyword_0_0() { return cManyManyKeyword_0_0; }

		//required?="required"?
		public Assignment getRequiredAssignment_1() { return cRequiredAssignment_1; }

		//"required"
		public Keyword getRequiredRequiredKeyword_1_0() { return cRequiredRequiredKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=DataEnum
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//DataEnum
		public RuleCall getTypeDataEnumEnumRuleCall_4_0() { return cTypeDataEnumEnumRuleCall_4_0; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cManyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cManyManyKeyword_1_0 = (Keyword)cManyAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeEntityCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeEntityEStringParserRuleCall_4_0_1 = (RuleCall)cTypeEntityCrossReference_4_0.eContents().get(1);
		
		//Reference:
		//	"ref" many?="many"? name=EString ":" type=[Entity|EString];
		@Override public ParserRule getRule() { return rule; }

		//"ref" many?="many"? name=EString ":" type=[Entity|EString]
		public Group getGroup() { return cGroup; }

		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//many?="many"?
		public Assignment getManyAssignment_1() { return cManyAssignment_1; }

		//"many"
		public Keyword getManyManyKeyword_1_0() { return cManyManyKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=[Entity|EString]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//[Entity|EString]
		public CrossReference getTypeEntityCrossReference_4_0() { return cTypeEntityCrossReference_4_0; }

		//EString
		public RuleCall getTypeEntityEStringParserRuleCall_4_0_1() { return cTypeEntityEStringParserRuleCall_4_0_1; }
	}

	public class ArtifactIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArtifactID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cManyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cManyManyKeyword_1_0 = (Keyword)cManyAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeArtifactCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeArtifactEStringParserRuleCall_4_0_1 = (RuleCall)cTypeArtifactCrossReference_4_0.eContents().get(1);
		
		//ArtifactID:
		//	"id" many?="many"? name=EString ":" type=[Artifact|EString];
		@Override public ParserRule getRule() { return rule; }

		//"id" many?="many"? name=EString ":" type=[Artifact|EString]
		public Group getGroup() { return cGroup; }

		//"id"
		public Keyword getIdKeyword_0() { return cIdKeyword_0; }

		//many?="many"?
		public Assignment getManyAssignment_1() { return cManyAssignment_1; }

		//"many"
		public Keyword getManyManyKeyword_1_0() { return cManyManyKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=[Artifact|EString]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//[Artifact|EString]
		public CrossReference getTypeArtifactCrossReference_4_0() { return cTypeArtifactCrossReference_4_0; }

		//EString
		public RuleCall getTypeArtifactEStringParserRuleCall_4_0_1() { return cTypeArtifactEStringParserRuleCall_4_0_1; }
	}

	public class OnServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArtifactAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cArtifactArtifactCrossReference_0_0 = (CrossReference)cArtifactAssignment_0.eContents().get(0);
		private final RuleCall cArtifactArtifactEStringParserRuleCall_0_0_1 = (RuleCall)cArtifactArtifactCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWhenServicesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhenServicesServiceEnumEnumRuleCall_2_0 = (RuleCall)cWhenServicesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWhenServicesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cWhenServicesServiceEnumEnumRuleCall_3_1_0 = (RuleCall)cWhenServicesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OnService:
		//	artifact=[Artifact|EString] "[" whenServices+=ServiceEnum ("," whenServices+=ServiceEnum)* "]";
		@Override public ParserRule getRule() { return rule; }

		//artifact=[Artifact|EString] "[" whenServices+=ServiceEnum ("," whenServices+=ServiceEnum)* "]"
		public Group getGroup() { return cGroup; }

		//artifact=[Artifact|EString]
		public Assignment getArtifactAssignment_0() { return cArtifactAssignment_0; }

		//[Artifact|EString]
		public CrossReference getArtifactArtifactCrossReference_0_0() { return cArtifactArtifactCrossReference_0_0; }

		//EString
		public RuleCall getArtifactArtifactEStringParserRuleCall_0_0_1() { return cArtifactArtifactEStringParserRuleCall_0_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//whenServices+=ServiceEnum
		public Assignment getWhenServicesAssignment_2() { return cWhenServicesAssignment_2; }

		//ServiceEnum
		public RuleCall getWhenServicesServiceEnumEnumRuleCall_2_0() { return cWhenServicesServiceEnumEnumRuleCall_2_0; }

		//("," whenServices+=ServiceEnum)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//whenServices+=ServiceEnum
		public Assignment getWhenServicesAssignment_3_1() { return cWhenServicesAssignment_3_1; }

		//ServiceEnum
		public RuleCall getWhenServicesServiceEnumEnumRuleCall_3_1_0() { return cWhenServicesServiceEnumEnumRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class SimpleServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleServiceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cServiceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInputKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInputAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInputInoutParserRuleCall_4_1_0 = (RuleCall)cInputAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cInputAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cInputInoutParserRuleCall_4_2_1_0 = (RuleCall)cInputAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOutputKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOutputAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOutputInoutParserRuleCall_5_1_0 = (RuleCall)cOutputAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cOutputAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cOutputInoutParserRuleCall_5_2_1_0 = (RuleCall)cOutputAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWhenKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cWhenAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cWhenOnServiceParserRuleCall_6_1_0 = (RuleCall)cWhenAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SimpleService:
		//	{SimpleService} "Service" name=EString "{" ("input : " input+=Inout ("," input+=Inout)*)? ("output : " output+=Inout
		//	("," output+=Inout)*)? ("when : " when+=OnService)* "}";
		@Override public ParserRule getRule() { return rule; }

		//{SimpleService} "Service" name=EString "{" ("input : " input+=Inout ("," input+=Inout)*)? ("output : " output+=Inout
		//("," output+=Inout)*)? ("when : " when+=OnService)* "}"
		public Group getGroup() { return cGroup; }

		//{SimpleService}
		public Action getSimpleServiceAction_0() { return cSimpleServiceAction_0; }

		//"Service"
		public Keyword getServiceKeyword_1() { return cServiceKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("input : " input+=Inout ("," input+=Inout)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"input : "
		public Keyword getInputKeyword_4_0() { return cInputKeyword_4_0; }

		//input+=Inout
		public Assignment getInputAssignment_4_1() { return cInputAssignment_4_1; }

		//Inout
		public RuleCall getInputInoutParserRuleCall_4_1_0() { return cInputInoutParserRuleCall_4_1_0; }

		//("," input+=Inout)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//input+=Inout
		public Assignment getInputAssignment_4_2_1() { return cInputAssignment_4_2_1; }

		//Inout
		public RuleCall getInputInoutParserRuleCall_4_2_1_0() { return cInputInoutParserRuleCall_4_2_1_0; }

		//("output : " output+=Inout ("," output+=Inout)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"output : "
		public Keyword getOutputKeyword_5_0() { return cOutputKeyword_5_0; }

		//output+=Inout
		public Assignment getOutputAssignment_5_1() { return cOutputAssignment_5_1; }

		//Inout
		public RuleCall getOutputInoutParserRuleCall_5_1_0() { return cOutputInoutParserRuleCall_5_1_0; }

		//("," output+=Inout)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//output+=Inout
		public Assignment getOutputAssignment_5_2_1() { return cOutputAssignment_5_2_1; }

		//Inout
		public RuleCall getOutputInoutParserRuleCall_5_2_1_0() { return cOutputInoutParserRuleCall_5_2_1_0; }

		//("when : " when+=OnService)*
		public Group getGroup_6() { return cGroup_6; }

		//"when : "
		public Keyword getWhenKeyword_6_0() { return cWhenKeyword_6_0; }

		//when+=OnService
		public Assignment getWhenAssignment_6_1() { return cWhenAssignment_6_1; }

		//OnService
		public RuleCall getWhenOnServiceParserRuleCall_6_1_0() { return cWhenOnServiceParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MultiServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultiServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParallelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cParallelParallelKeyword_2_1_0 = (Keyword)cParallelAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWhenKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWhenAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWhenOnServiceParserRuleCall_4_1_0 = (RuleCall)cWhenAssignment_4_1.eContents().get(0);
		private final Keyword cServicesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cServicesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cServicesServiceCrossReference_6_0 = (CrossReference)cServicesAssignment_6.eContents().get(0);
		private final RuleCall cServicesServiceEStringParserRuleCall_6_0_1 = (RuleCall)cServicesServiceCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cServicesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cServicesServiceCrossReference_7_1_0 = (CrossReference)cServicesAssignment_7_1.eContents().get(0);
		private final RuleCall cServicesServiceEStringParserRuleCall_7_1_0_1 = (RuleCall)cServicesServiceCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//MultiService:
		//	"MultiService" name=EString ("[" parallel?="parallel"? "]")? "{" ("when : " when+=OnService)* "services : "
		//	services+=[Service|EString] ("," services+=[Service|EString])+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"MultiService" name=EString ("[" parallel?="parallel"? "]")? "{" ("when : " when+=OnService)* "services : "
		//services+=[Service|EString] ("," services+=[Service|EString])+ "}"
		public Group getGroup() { return cGroup; }

		//"MultiService"
		public Keyword getMultiServiceKeyword_0() { return cMultiServiceKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//("[" parallel?="parallel"? "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//parallel?="parallel"?
		public Assignment getParallelAssignment_2_1() { return cParallelAssignment_2_1; }

		//"parallel"
		public Keyword getParallelParallelKeyword_2_1_0() { return cParallelParallelKeyword_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("when : " when+=OnService)*
		public Group getGroup_4() { return cGroup_4; }

		//"when : "
		public Keyword getWhenKeyword_4_0() { return cWhenKeyword_4_0; }

		//when+=OnService
		public Assignment getWhenAssignment_4_1() { return cWhenAssignment_4_1; }

		//OnService
		public RuleCall getWhenOnServiceParserRuleCall_4_1_0() { return cWhenOnServiceParserRuleCall_4_1_0; }

		//"services : "
		public Keyword getServicesKeyword_5() { return cServicesKeyword_5; }

		//services+=[Service|EString]
		public Assignment getServicesAssignment_6() { return cServicesAssignment_6; }

		//[Service|EString]
		public CrossReference getServicesServiceCrossReference_6_0() { return cServicesServiceCrossReference_6_0; }

		//EString
		public RuleCall getServicesServiceEStringParserRuleCall_6_0_1() { return cServicesServiceEStringParserRuleCall_6_0_1; }

		//("," services+=[Service|EString])+
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//services+=[Service|EString]
		public Assignment getServicesAssignment_7_1() { return cServicesAssignment_7_1; }

		//[Service|EString]
		public CrossReference getServicesServiceCrossReference_7_1_0() { return cServicesServiceCrossReference_7_1_0; }

		//EString
		public RuleCall getServicesServiceEStringParserRuleCall_7_1_0_1() { return cServicesServiceEStringParserRuleCall_7_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class InoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cManyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cManyManyKeyword_0_0 = (Keyword)cManyAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeAbstractEntityCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeAbstractEntityEStringParserRuleCall_1_0_1 = (RuleCall)cTypeAbstractEntityCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cWithKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCompatibilityAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cCompatibilityCompParserRuleCall_2_2_0 = (RuleCall)cCompatibilityAssignment_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Inout:
		//	many?="many"? type=[AbstractEntity|EString] ("[" "with" compatibility=Comp "]")?;
		@Override public ParserRule getRule() { return rule; }

		//many?="many"? type=[AbstractEntity|EString] ("[" "with" compatibility=Comp "]")?
		public Group getGroup() { return cGroup; }

		//many?="many"?
		public Assignment getManyAssignment_0() { return cManyAssignment_0; }

		//"many"
		public Keyword getManyManyKeyword_0_0() { return cManyManyKeyword_0_0; }

		//type=[AbstractEntity|EString]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[AbstractEntity|EString]
		public CrossReference getTypeAbstractEntityCrossReference_1_0() { return cTypeAbstractEntityCrossReference_1_0; }

		//EString
		public RuleCall getTypeAbstractEntityEStringParserRuleCall_1_0_1() { return cTypeAbstractEntityEStringParserRuleCall_1_0_1; }

		//("[" "with" compatibility=Comp "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//"with"
		public Keyword getWithKeyword_2_1() { return cWithKeyword_2_1; }

		//compatibility=Comp
		public Assignment getCompatibilityAssignment_2_2() { return cCompatibilityAssignment_2_2; }

		//Comp
		public RuleCall getCompatibilityCompParserRuleCall_2_2_0() { return cCompatibilityCompParserRuleCall_2_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
	}

	public class CompElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEStringParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEStringParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cEStringParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Comp:
		//	EString ("." EString)* "=" EString;
		@Override public ParserRule getRule() { return rule; }

		//EString ("." EString)* "=" EString
		public Group getGroup() { return cGroup; }

		//EString
		public RuleCall getEStringParserRuleCall_0() { return cEStringParserRuleCall_0; }

		//("." EString)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//EString
		public RuleCall getEStringParserRuleCall_1_1() { return cEStringParserRuleCall_1_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//EString
		public RuleCall getEStringParserRuleCall_3() { return cEStringParserRuleCall_3; }
	}
	
	
	public class FormatEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FormatEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cXMIEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cXMIXMIKeyword_0_0 = (Keyword)cXMIEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBINARYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBINARYBINARYKeyword_1_0 = (Keyword)cBINARYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTEXTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTEXTTEXTKeyword_2_0 = (Keyword)cTEXTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cXMLEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cXMLXMLKeyword_3_0 = (Keyword)cXMLEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cJSONEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cJSONJSONKeyword_4_0 = (Keyword)cJSONEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cATLEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cATLATLKeyword_5_0 = (Keyword)cATLEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cZIPEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cZIPZIPKeyword_6_0 = (Keyword)cZIPEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum FormatEnum:
		//	XMI | BINARY | TEXT | XML | JSON | ATL | ZIP;
		public EnumRule getRule() { return rule; }

		//XMI | BINARY | TEXT | XML | JSON | ATL | ZIP
		public Alternatives getAlternatives() { return cAlternatives; }

		//XMI
		public EnumLiteralDeclaration getXMIEnumLiteralDeclaration_0() { return cXMIEnumLiteralDeclaration_0; }

		//"XMI"
		public Keyword getXMIXMIKeyword_0_0() { return cXMIXMIKeyword_0_0; }

		//BINARY
		public EnumLiteralDeclaration getBINARYEnumLiteralDeclaration_1() { return cBINARYEnumLiteralDeclaration_1; }

		//"BINARY"
		public Keyword getBINARYBINARYKeyword_1_0() { return cBINARYBINARYKeyword_1_0; }

		//TEXT
		public EnumLiteralDeclaration getTEXTEnumLiteralDeclaration_2() { return cTEXTEnumLiteralDeclaration_2; }

		//"TEXT"
		public Keyword getTEXTTEXTKeyword_2_0() { return cTEXTTEXTKeyword_2_0; }

		//XML
		public EnumLiteralDeclaration getXMLEnumLiteralDeclaration_3() { return cXMLEnumLiteralDeclaration_3; }

		//"XML"
		public Keyword getXMLXMLKeyword_3_0() { return cXMLXMLKeyword_3_0; }

		//JSON
		public EnumLiteralDeclaration getJSONEnumLiteralDeclaration_4() { return cJSONEnumLiteralDeclaration_4; }

		//"JSON"
		public Keyword getJSONJSONKeyword_4_0() { return cJSONJSONKeyword_4_0; }

		//ATL
		public EnumLiteralDeclaration getATLEnumLiteralDeclaration_5() { return cATLEnumLiteralDeclaration_5; }

		//"ATL"
		public Keyword getATLATLKeyword_5_0() { return cATLATLKeyword_5_0; }

		//ZIP
		public EnumLiteralDeclaration getZIPEnumLiteralDeclaration_6() { return cZIPEnumLiteralDeclaration_6; }

		//"ZIP"
		public Keyword getZIPZIPKeyword_6_0() { return cZIPZIPKeyword_6_0; }
	}

	public class ServiceEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUploadEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUploadUploadKeyword_0_0 = (Keyword)cUploadEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDownloadEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDownloadDownloadKeyword_1_0 = (Keyword)cDownloadEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUpdateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUpdateUpdateKeyword_2_0 = (Keyword)cUpdateEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cReadEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cReadReadKeyword_3_0 = (Keyword)cReadEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cReadAllEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cReadAllReadAllKeyword_4_0 = (Keyword)cReadAllEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSearchEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSearchSearchKeyword_5_0 = (Keyword)cSearchEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDeleteEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDeleteDeleteKeyword_6_0 = (Keyword)cDeleteEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cAllEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cAllAllKeyword_7_0 = (Keyword)cAllEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum ServiceEnum:
		//	upload | download | update | read | readAll | search | delete | all;
		public EnumRule getRule() { return rule; }

		//upload | download | update | read | readAll | search | delete | all
		public Alternatives getAlternatives() { return cAlternatives; }

		//upload
		public EnumLiteralDeclaration getUploadEnumLiteralDeclaration_0() { return cUploadEnumLiteralDeclaration_0; }

		//"upload"
		public Keyword getUploadUploadKeyword_0_0() { return cUploadUploadKeyword_0_0; }

		//download
		public EnumLiteralDeclaration getDownloadEnumLiteralDeclaration_1() { return cDownloadEnumLiteralDeclaration_1; }

		//"download"
		public Keyword getDownloadDownloadKeyword_1_0() { return cDownloadDownloadKeyword_1_0; }

		//update
		public EnumLiteralDeclaration getUpdateEnumLiteralDeclaration_2() { return cUpdateEnumLiteralDeclaration_2; }

		//"update"
		public Keyword getUpdateUpdateKeyword_2_0() { return cUpdateUpdateKeyword_2_0; }

		//read
		public EnumLiteralDeclaration getReadEnumLiteralDeclaration_3() { return cReadEnumLiteralDeclaration_3; }

		//"read"
		public Keyword getReadReadKeyword_3_0() { return cReadReadKeyword_3_0; }

		//readAll
		public EnumLiteralDeclaration getReadAllEnumLiteralDeclaration_4() { return cReadAllEnumLiteralDeclaration_4; }

		//"readAll"
		public Keyword getReadAllReadAllKeyword_4_0() { return cReadAllReadAllKeyword_4_0; }

		//search
		public EnumLiteralDeclaration getSearchEnumLiteralDeclaration_5() { return cSearchEnumLiteralDeclaration_5; }

		//"search"
		public Keyword getSearchSearchKeyword_5_0() { return cSearchSearchKeyword_5_0; }

		//delete
		public EnumLiteralDeclaration getDeleteEnumLiteralDeclaration_6() { return cDeleteEnumLiteralDeclaration_6; }

		//"delete"
		public Keyword getDeleteDeleteKeyword_6_0() { return cDeleteDeleteKeyword_6_0; }

		//all
		public EnumLiteralDeclaration getAllEnumLiteralDeclaration_7() { return cAllEnumLiteralDeclaration_7; }

		//"all"
		public Keyword getAllAllKeyword_7_0() { return cAllAllKeyword_7_0; }
	}

	public class DataEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DataEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBooleanBooleanKeyword_0_0 = (Keyword)cBooleanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDoubleDoubleKeyword_1_0 = (Keyword)cDoubleEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIntegerIntegerKeyword_2_0 = (Keyword)cIntegerEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cStringStringKeyword_3_0 = (Keyword)cStringEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum DataEnum:
		//	Boolean | Double | Integer | String;
		public EnumRule getRule() { return rule; }

		//Boolean | Double | Integer | String
		public Alternatives getAlternatives() { return cAlternatives; }

		//Boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_0() { return cBooleanEnumLiteralDeclaration_0; }

		//"Boolean"
		public Keyword getBooleanBooleanKeyword_0_0() { return cBooleanBooleanKeyword_0_0; }

		//Double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_1() { return cDoubleEnumLiteralDeclaration_1; }

		//"Double"
		public Keyword getDoubleDoubleKeyword_1_0() { return cDoubleDoubleKeyword_1_0; }

		//Integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_2() { return cIntegerEnumLiteralDeclaration_2; }

		//"Integer"
		public Keyword getIntegerIntegerKeyword_2_0() { return cIntegerIntegerKeyword_2_0; }

		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_3() { return cStringEnumLiteralDeclaration_3; }

		//"String"
		public Keyword getStringStringKeyword_3_0() { return cStringStringKeyword_3_0; }
	}
	
	private final RootElements pRoot;
	private final ServiceElements pService;
	private final AttributeElements pAttribute;
	private final AbstractEntityElements pAbstractEntity;
	private final ArtifactElements pArtifact;
	private final EntityElements pEntity;
	private final EStringElements pEString;
	private final FormatEnumElements unknownRuleFormatEnum;
	private final ServiceEnumElements unknownRuleServiceEnum;
	private final EBooleanElements pEBoolean;
	private final PrimitiveElements pPrimitive;
	private final ReferenceElements pReference;
	private final ArtifactIDElements pArtifactID;
	private final DataEnumElements unknownRuleDataEnum;
	private final OnServiceElements pOnService;
	private final SimpleServiceElements pSimpleService;
	private final MultiServiceElements pMultiService;
	private final InoutElements pInout;
	private final CompElements pComp;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RulesGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pService = new ServiceElements();
		this.pAttribute = new AttributeElements();
		this.pAbstractEntity = new AbstractEntityElements();
		this.pArtifact = new ArtifactElements();
		this.pEntity = new EntityElements();
		this.pEString = new EStringElements();
		this.unknownRuleFormatEnum = new FormatEnumElements();
		this.unknownRuleServiceEnum = new ServiceEnumElements();
		this.pEBoolean = new EBooleanElements();
		this.pPrimitive = new PrimitiveElements();
		this.pReference = new ReferenceElements();
		this.pArtifactID = new ArtifactIDElements();
		this.unknownRuleDataEnum = new DataEnumElements();
		this.pOnService = new OnServiceElements();
		this.pSimpleService = new SimpleServiceElements();
		this.pMultiService = new MultiServiceElements();
		this.pInout = new InoutElements();
		this.pComp = new CompElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("miso.distil.codeGenerator.Rules".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//	artifacts+=Artifact (artifacts+=Artifact | entities+=Entity | services+=Service)*;
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//Service:
	//	SimpleService | MultiService;
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}

	//Attribute:
	//	Primitive | Reference | ArtifactID;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//AbstractEntity:
	//	Artifact | Entity;
	public AbstractEntityElements getAbstractEntityAccess() {
		return pAbstractEntity;
	}
	
	public ParserRule getAbstractEntityRule() {
		return getAbstractEntityAccess().getRule();
	}

	//Artifact:
	//	"Artifact" name=EString ("[" ("extension " "." extension=EString)? ("format " format=FormatEnum)? ("services : "
	//	basicServices+=ServiceEnum ("," basicServices+=ServiceEnum)*)? "]")? "{" attributes+=Attribute* "}";
	public ArtifactElements getArtifactAccess() {
		return pArtifact;
	}
	
	public ParserRule getArtifactRule() {
		return getArtifactAccess().getRule();
	}

	//Entity:
	//	"Entity" name=EString "{" attributes+=Attribute* "}";
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//enum FormatEnum:
	//	XMI | BINARY | TEXT | XML | JSON | ATL | ZIP;
	public FormatEnumElements getFormatEnumAccess() {
		return unknownRuleFormatEnum;
	}
	
	public EnumRule getFormatEnumRule() {
		return getFormatEnumAccess().getRule();
	}

	//enum ServiceEnum:
	//	upload | download | update | read | readAll | search | delete | all;
	public ServiceEnumElements getServiceEnumAccess() {
		return unknownRuleServiceEnum;
	}
	
	public EnumRule getServiceEnumRule() {
		return getServiceEnumAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//Primitive:
	//	many?="many"? required?="required"? name=EString ":" type=DataEnum;
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}

	//Reference:
	//	"ref" many?="many"? name=EString ":" type=[Entity|EString];
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//ArtifactID:
	//	"id" many?="many"? name=EString ":" type=[Artifact|EString];
	public ArtifactIDElements getArtifactIDAccess() {
		return pArtifactID;
	}
	
	public ParserRule getArtifactIDRule() {
		return getArtifactIDAccess().getRule();
	}

	//enum DataEnum:
	//	Boolean | Double | Integer | String;
	public DataEnumElements getDataEnumAccess() {
		return unknownRuleDataEnum;
	}
	
	public EnumRule getDataEnumRule() {
		return getDataEnumAccess().getRule();
	}

	//OnService:
	//	artifact=[Artifact|EString] "[" whenServices+=ServiceEnum ("," whenServices+=ServiceEnum)* "]";
	public OnServiceElements getOnServiceAccess() {
		return pOnService;
	}
	
	public ParserRule getOnServiceRule() {
		return getOnServiceAccess().getRule();
	}

	//SimpleService:
	//	{SimpleService} "Service" name=EString "{" ("input : " input+=Inout ("," input+=Inout)*)? ("output : " output+=Inout
	//	("," output+=Inout)*)? ("when : " when+=OnService)* "}";
	public SimpleServiceElements getSimpleServiceAccess() {
		return pSimpleService;
	}
	
	public ParserRule getSimpleServiceRule() {
		return getSimpleServiceAccess().getRule();
	}

	//MultiService:
	//	"MultiService" name=EString ("[" parallel?="parallel"? "]")? "{" ("when : " when+=OnService)* "services : "
	//	services+=[Service|EString] ("," services+=[Service|EString])+ "}";
	public MultiServiceElements getMultiServiceAccess() {
		return pMultiService;
	}
	
	public ParserRule getMultiServiceRule() {
		return getMultiServiceAccess().getRule();
	}

	//Inout:
	//	many?="many"? type=[AbstractEntity|EString] ("[" "with" compatibility=Comp "]")?;
	public InoutElements getInoutAccess() {
		return pInout;
	}
	
	public ParserRule getInoutRule() {
		return getInoutAccess().getRule();
	}

	//Comp:
	//	EString ("." EString)* "=" EString;
	public CompElements getCompAccess() {
		return pComp;
	}
	
	public ParserRule getCompRule() {
		return getCompAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
