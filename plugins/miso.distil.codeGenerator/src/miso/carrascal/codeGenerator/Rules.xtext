// automatically generated by Xtext
grammar miso.carrascal.codeGenerator.Rules with org.eclipse.xtext.common.Terminals

import "http://miso/carrascal/code/generator/model" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Root returns Root:
	artifacts+=Artifact 
	(artifacts+=Artifact | entities+=Entity | services+=Service)*;


EString returns ecore::EString:
	STRING | ID;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Service returns Service:
	SimpleService | MultiService;

Attribute returns Attribute:
	SimpleAttribute | MultiAttribute;

AbstractEntity returns AbstractEntity:
	Artifact | Entity;

enum FormatEnum returns FormatEnum:
	XMI = 'XMI' | BINARY = 'BINARY' | TEXT = 'TEXT' | XML = 'XML' | JSON = 'JSON' | ATL = 'ATL' | ZIP = 'ZIP';

enum ServiceEnum returns ServiceEnum:
	upload = 'upload' | download = 'download' | update = 'update' | read = 'read' | readAll = 'readAll' | search = 'search';

enum DataEnum returns DataEnum:
	Boolean = 'Boolean' | Double = 'Double' | Integer = 'Integer' | String = 'String';


Artifact returns Artifact:
	{Artifact}
	'Artifact'
	name=EString
	('['
		('extension ' '.'extension=EString)?
		('format ' format=FormatEnum)?
		('services : ' basicServices+=ServiceEnum ( "," basicServices+=ServiceEnum)* )?
	']')?
	'{'
		(attributes+=Attribute)*
	'}';

Entity returns Entity:
	{Entity}
	'Entity'
	name=EString
	'{'
		(attributes+=Attribute)*
	'}';

SimpleAttribute returns SimpleAttribute:
	(many?='many')?
	(required?='required')?
	name=EString
	':' data=DataEnum;

MultiAttribute returns MultiAttribute:
	name=EString
	':' type=[Entity|EString];
	
OnService returns OnService:
	artifact=[Artifact|EString]
	'['
		whenServices+=ServiceEnum ( ',' whenServices+=ServiceEnum)*
	']';

SimpleService returns SimpleService:
	'Service'
	name=EString
	'{'
		('input : ' input+=[AbstractEntity|EString] ( "," input+=[AbstractEntity|EString])* )? 
		('output : ' output+=[AbstractEntity|EString] ( "," output+=[AbstractEntity|EString])* )?
		('when : ' when+=OnService)*
	'}';

MultiService returns MultiService:
	'MultiService'
	name=EString
	('['
		(parallel?='parallel')?
	']')?
	'{'
		('when : ' when+=OnService)*
		'services : ' services+=[Service|EString] ( "," services+=[Service|EString])+ 
	'}';
