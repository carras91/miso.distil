/*
 * Rules for MDE Service Specification Language
 * 
 * @author Carlos Carrascal
 */
grammar miso.distil.codeGenerator.Rules with org.eclipse.xtext.common.Terminals

import "http://miso/distil/codeGeneratorModel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Root returns Root:
	artifacts+=Artifact 
	(artifacts+=Artifact | entities+=Entity | services+=Service)*;



Service returns Service:
	SimpleService | MultiService;

Attribute returns Attribute:
	Primitive | Reference | ArtifactID;

AbstractEntity returns AbstractEntity:
	Artifact | Entity;

Artifact returns Artifact:
	'Artifact'
	name=EString
	('['
		('extension ' '.'extension=EString)?
		('format ' format=FormatEnum)?
		('services : ' basicServices+=ServiceEnum ( "," basicServices+=ServiceEnum)* )?
	']')?
	'{'
		(attributes+=Attribute)*
	'}';

Entity returns Entity:
	'Entity'
	name=EString
	'{'
		(attributes+=Attribute)*
	'}';

EString returns ecore::EString:
	STRING | ID;

enum FormatEnum returns FormatEnum:
	XMI = 'XMI' | BINARY = 'BINARY' | TEXT = 'TEXT' | XML = 'XML' | JSON = 'JSON' | ATL = 'ATL' | ZIP = 'ZIP';

enum ServiceEnum returns ServiceEnum:
	upload = 'upload' | download = 'download' | update = 'update' | read = 'read' | readAll = 'readAll' | search = 'search' | delete = 'delete' | all = 'all';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Primitive returns Primitive:
	(many?='many')?
	(required?='required')?
	name=EString
	':' type=DataEnum;

Reference returns Reference:
	'ref'
	(many?='many')?
	name=EString
	':' type=[Entity|EString];

ArtifactID returns ArtifactID:
	'id'
	(many?='many')?
	name=EString
	':' type=[Artifact|EString];

enum DataEnum returns DataEnum:
	Boolean = 'Boolean' | Double = 'Double' | Integer = 'Integer' | String = 'String';

OnService returns OnService:
	artifact=[Artifact|EString]
	'['
		whenServices+=ServiceEnum ( ',' whenServices+=ServiceEnum)*
	']';

SimpleService returns SimpleService:
	{SimpleService}
	'Service'
	name=EString
	'{'
		('input : ' input+=Inout ( "," input+=Inout)* )? 
		('output : ' output+=Inout ( "," output+=Inout)* )?
		('when : ' when+=OnService)*
	'}';

MultiService returns MultiService:
	'MultiService'
	name=EString
	('['
		(parallel?='parallel')?
	']')?
	'{'
		('when : ' when+=OnService)*
		'services : ' services+=[Service|EString] ( "," services+=[Service|EString])+ 
	'}';

Inout returns Inout:
	(many?='many')?
	type=[AbstractEntity|EString]
	('[' 'with' compatibility=Comp ']')?;

Comp:
	EString ('.'EString)* '=' EString;
