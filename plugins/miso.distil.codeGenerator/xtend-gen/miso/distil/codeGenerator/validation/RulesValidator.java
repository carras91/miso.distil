/**
 * generated by Xtext
 */
package miso.distil.codeGenerator.validation;

import com.google.inject.Inject;
import java.util.ArrayList;
import java.util.List;
import miso.distil.codeGenerator.generator.Names;
import miso.distil.codeGenerator.validation.AbstractRulesValidator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules.
 * 
 * @author Carlos Carrascal
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class RulesValidator extends AbstractRulesValidator {
  public final static String LOWER_CASE = "lowerCase";
  
  public final static String UPPER_CASE = "upperCase";
  
  public final static String REPEATED_NAME = "repeatedName";
  
  public final static String INPUT_WRONG = "wrongInput";
  
  public final static String PROHIBITED_NAME = "prohibitedName";
  
  public final static String INVALID_NAME = "invalidName";
  
  public final static String PROHIBITED_REFERENCE = "prohibitedReference";
  
  public final static String RECURSIVE_REFERENCE = "recursiveReference";
  
  public final static String ARTIFACT_TODO = "artifactToDo";
  
  public final static String SERVICE_TODO = "serviceToDo";
  
  public final static String EMPTY_MONGO_URI = "emptyMongoURI";
  
  @Inject
  private Names names;
  
  @Check
  public Object chechOnService(final /* OnService */Object onSer) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field ServiceEnum is undefined for the type RulesValidator"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nwhenServices cannot be resolved"
      + "\nforEach cannot be resolved"
      + "\nartifact cannot be resolved"
      + "\nbasicServices cannot be resolved"
      + "\n!= cannot be resolved"
      + "\nartifact cannot be resolved"
      + "\nbasicServices cannot be resolved"
      + "\ncontains cannot be resolved"
      + "\n! cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nartifact cannot be resolved"
      + "\nbasicServices cannot be resolved"
      + "\ncontains cannot be resolved"
      + "\nALL cannot be resolved"
      + "\n! cannot be resolved"
      + "\nartifact cannot be resolved"
      + "\nname cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nON_SERVICE__WHEN_SERVICES cannot be resolved");
  }
  
  @Check
  public void checkReferenceNotRecursive(final /* Entity */Object ent) {
    throw new Error("Unresolved compilation problems:"
      + "\nAttribute cannot be resolved to a type."
      + "\nReference cannot be resolved to a type."
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nattributes cannot be resolved"
      + "\ntype cannot be resolved"
      + "\nattributes cannot be resolved"
      + "\nlookForRepeated cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nABSTRACT_ENTITY__NAME cannot be resolved");
  }
  
  private Boolean lookForRepeated(final /* EList<Attribute> */Object atts, final String name) {
    throw new Error("Unresolved compilation problems:"
      + "\nAttribute cannot be resolved to a type."
      + "\nReference cannot be resolved to a type."
      + "\ntype cannot be resolved"
      + "\nname cannot be resolved"
      + "\nequalsIgnoreCase cannot be resolved"
      + "\ntype cannot be resolved"
      + "\nattributes cannot be resolved"
      + "\nlookForRepeated cannot be resolved");
  }
  
  @Check
  public void checkMultiServiceParameters(final /* MultiService */Object mulSer) {
    throw new Error("Unresolved compilation problems:"
      + "\nInout cannot be resolved to a type."
      + "\nService cannot be resolved to a type."
      + "\nService cannot be resolved to a type."
      + "\nService cannot be resolved to a type."
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nparallel cannot be resolved"
      + "\n! cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nservices cannot be resolved"
      + "\nempty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nservices cannot be resolved"
      + "\nget cannot be resolved"
      + "\noutput cannot be resolved"
      + "\nservices cannot be resolved"
      + "\nsize cannot be resolved"
      + "\nservices cannot be resolved"
      + "\ngetInput cannot be resolved"
      + "\nsize cannot be resolved"
      + "\nname cannot be resolved"
      + "\ngetInput cannot be resolved"
      + "\nsize cannot be resolved"
      + "\nservices cannot be resolved"
      + "\nname cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nMULTI_SERVICE__SERVICES cannot be resolved"
      + "\ngetInput cannot be resolved"
      + "\nsize cannot be resolved"
      + "\ntype cannot be resolved"
      + "\nequals cannot be resolved"
      + "\ngetInput cannot be resolved"
      + "\nget cannot be resolved"
      + "\ntype cannot be resolved"
      + "\n! cannot be resolved"
      + "\n|| cannot be resolved"
      + "\nmany cannot be resolved"
      + "\nequals cannot be resolved"
      + "\ngetInput cannot be resolved"
      + "\nget cannot be resolved"
      + "\nmany cannot be resolved"
      + "\n! cannot be resolved"
      + "\nname cannot be resolved"
      + "\ngetInput cannot be resolved"
      + "\nget cannot be resolved"
      + "\ntype cannot be resolved"
      + "\nname cannot be resolved"
      + "\ngetInput cannot be resolved"
      + "\nget cannot be resolved"
      + "\nmany cannot be resolved"
      + "\ntype cannot be resolved"
      + "\nname cannot be resolved"
      + "\nmany cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nMULTI_SERVICE__SERVICES cannot be resolved"
      + "\ngetOutput cannot be resolved");
  }
  
  private /* EList<Inout> */Object getInput(final /* Service */Object service) {
    throw new Error("Unresolved compilation problems:"
      + "\nSimpleService cannot be resolved to a type."
      + "\nMultiService cannot be resolved to a type."
      + "\nInout cannot be resolved to a type."
      + "\nInout cannot be resolved to a type."
      + "\nService cannot be resolved to a type."
      + "\nService cannot be resolved to a type."
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\ninput cannot be resolved"
      + "\nparallel cannot be resolved"
      + "\nservices cannot be resolved"
      + "\ngetInput cannot be resolved"
      + "\nservices cannot be resolved"
      + "\nget cannot be resolved"
      + "\ngetInput cannot be resolved");
  }
  
  private /* EList<Inout> */Object getOutput(final /* Service */Object service) {
    throw new Error("Unresolved compilation problems:"
      + "\nSimpleService cannot be resolved to a type."
      + "\nMultiService cannot be resolved to a type."
      + "\nInout cannot be resolved to a type."
      + "\nInout cannot be resolved to a type."
      + "\nService cannot be resolved to a type."
      + "\nService cannot be resolved to a type."
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\noutput cannot be resolved"
      + "\nparallel cannot be resolved"
      + "\nservices cannot be resolved"
      + "\ngetOutput cannot be resolved"
      + "\nservices cannot be resolved"
      + "\nlast cannot be resolved"
      + "\ngetOutput cannot be resolved");
  }
  
  @Check
  public void checkEntityStartsWithCapital(final /* AbstractEntity */Object ent) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nname cannot be resolved"
      + "\ncheckValidCharacters cannot be resolved"
      + "\nempty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nname cannot be resolved"
      + "\ncheckValidCharacters cannot be resolved"
      + "\ntoString cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nABSTRACT_ENTITY__NAME cannot be resolved"
      + "\nname cannot be resolved"
      + "\ncodePointAt cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nABSTRACT_ENTITY__NAME cannot be resolved");
  }
  
  @Check
  public void checkAttributeLowerCase(final /* Attribute */Object att) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nname cannot be resolved"
      + "\ncheckValidCharacters cannot be resolved"
      + "\nempty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nname cannot be resolved"
      + "\ncheckValidCharacters cannot be resolved"
      + "\ntoString cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nATTRIBUTE__NAME cannot be resolved"
      + "\nname cannot be resolved"
      + "\nlength cannot be resolved"
      + "\nname cannot be resolved"
      + "\ncodePointAt cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nATTRIBUTE__NAME cannot be resolved");
  }
  
  @Check
  public void checkServiceStartsWithCapital(final /* Service */Object ser) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nname cannot be resolved"
      + "\ncheckValidCharacters cannot be resolved"
      + "\nempty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nname cannot be resolved"
      + "\ncheckValidCharacters cannot be resolved"
      + "\ntoString cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nSERVICE__NAME cannot be resolved"
      + "\nname cannot be resolved"
      + "\ncodePointAt cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nSERVICE__NAME cannot be resolved");
  }
  
  private List<Integer> checkValidCharacters(final String name) {
    final ArrayList<Integer> list = new ArrayList<Integer>();
    for (int i = 0; (i < name.length()); i++) {
      int _codePointAt = name.codePointAt(i);
      boolean _isLetterOrDigit = Character.isLetterOrDigit(_codePointAt);
      boolean _not = (!_isLetterOrDigit);
      if (_not) {
        list.add(Integer.valueOf(i));
      }
    }
    return list;
  }
  
  @Check
  public void checkUniqueNames(final /* Root */Object root) {
    throw new Error("Unresolved compilation problems:"
      + "\nArtifact cannot be resolved to a type."
      + "\nAttribute cannot be resolved to a type."
      + "\nEntity cannot be resolved to a type."
      + "\nAttribute cannot be resolved to a type."
      + "\nService cannot be resolved to a type."
      + "\nThe method name is undefined for the type RulesValidator"
      + "\nThe method name is undefined for the type RulesValidator"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nThe method name is undefined for the type RulesValidator"
      + "\nThe method attributes is undefined for the type RulesValidator"
      + "\nThe method name is undefined for the type RulesValidator"
      + "\nThe method name is undefined for the type RulesValidator"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nThe method name is undefined for the type RulesValidator"
      + "\nThe method name is undefined for the type RulesValidator"
      + "\nThe method name is undefined for the type RulesValidator"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nThe method name is undefined for the type RulesValidator"
      + "\nThe method attributes is undefined for the type RulesValidator"
      + "\nThe method name is undefined for the type RulesValidator"
      + "\nThe method name is undefined for the type RulesValidator"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nThe method name is undefined for the type RulesValidator"
      + "\nThe method name is undefined for the type RulesValidator"
      + "\nThe method name is undefined for the type RulesValidator"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nThe method name is undefined for the type RulesValidator"
      + "\nartifacts cannot be resolved"
      + "\ntoLowerCase cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nABSTRACT_ENTITY__NAME cannot be resolved"
      + "\ntoLowerCase cannot be resolved"
      + "\ntoLowerCase cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nATTRIBUTE__NAME cannot be resolved"
      + "\ntoLowerCase cannot be resolved"
      + "\nentities cannot be resolved"
      + "\ntoLowerCase cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nABSTRACT_ENTITY__NAME cannot be resolved"
      + "\ntoLowerCase cannot be resolved"
      + "\ntoLowerCase cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nATTRIBUTE__NAME cannot be resolved"
      + "\ntoLowerCase cannot be resolved"
      + "\nservices cannot be resolved"
      + "\ntoLowerCase cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nSERVICE__NAME cannot be resolved"
      + "\ntoLowerCase cannot be resolved");
  }
  
  @Check
  public void checkNamesEntityNotProhibited(final /* AbstractEntity */Object ent) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nname cannot be resolved"
      + "\nequalsIgnoreCase cannot be resolved"
      + "\n|| cannot be resolved"
      + "\nname cannot be resolved"
      + "\nequalsIgnoreCase cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nABSTRACT_ENTITY__NAME cannot be resolved");
  }
  
  @Check
  public void checkNamesAttributeNotProhibited(final /* Attribute */Object att) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nname cannot be resolved"
      + "\nequalsIgnoreCase cannot be resolved"
      + "\n|| cannot be resolved"
      + "\nname cannot be resolved"
      + "\nequalsIgnoreCase cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nATTRIBUTE__NAME cannot be resolved");
  }
  
  @Check
  public void checkNamesServiceNotProhibited(final /* Service */Object ser) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nname cannot be resolved"
      + "\nequalsIgnoreCase cannot be resolved"
      + "\n|| cannot be resolved"
      + "\nname cannot be resolved"
      + "\nequalsIgnoreCase cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nSERVICE__NAME cannot be resolved");
  }
  
  @Check
  public void checkToDo(final /* Artifact */Object artifact) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field ServiceEnum is undefined for the type RulesValidator"
      + "\nThe method or field ServiceEnum is undefined for the type RulesValidator"
      + "\nThe method or field ServiceEnum is undefined for the type RulesValidator"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nbasicServices cannot be resolved"
      + "\ncontains cannot be resolved"
      + "\nUPDATE cannot be resolved"
      + "\n|| cannot be resolved"
      + "\nbasicServices cannot be resolved"
      + "\ncontains cannot be resolved"
      + "\nUPLOAD cannot be resolved"
      + "\n|| cannot be resolved"
      + "\nbasicServices cannot be resolved"
      + "\ncontains cannot be resolved"
      + "\nALL cannot be resolved"
      + "\neResource cannot be resolved"
      + "\nURI cannot be resolved"
      + "\ntoPlatformString cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nABSTRACT_ENTITY__NAME cannot be resolved");
  }
  
  @Check
  public void checkToDo(final /* SimpleService */Object service) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\neResource cannot be resolved"
      + "\nURI cannot be resolved"
      + "\ntoPlatformString cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nSERVICE__NAME cannot be resolved");
  }
  
  @Check
  public void checkMongoURI(final /* Root */Object root) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field CodeGeneratorModelPackage is undefined for the type RulesValidator"
      + "\nmongoURIs cannot be resolved"
      + "\nempty cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nROOT__MONGO_UR_IS cannot be resolved");
  }
}
